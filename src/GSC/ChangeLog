2023-04-22  Michael  <michael@ajax>

	* data.py (GSCSSubsetSC.__init__): The training data consists of
	the default set of wav files, plus 2300 _silence_ files listed in
	silence_training_list.txt, minus the training and validation files.

2023-04-21  Michael  <michael@ajax>

	* srnn.py (main): testing and validation files read by the
	dataloader must contain relative paths. The dataloader's own
	load_list function will prepend the current working directory to
	produce an exhaustive path.

2023-04-15  Michael Guravage  <michael@odysseus>

	* srnn.py (main:gsc_training_dataset): We need not specify
	folder_in_archive="SpeechCommands", this is the default.
	(main:gsc_training_dataset): Ditto.

2023-04-14  Michael Guravage  <michael@odysseus>

	* config-v1-cuda.toml: Add new network_size parameter.

	* srnn.py (read_configuration): Add new network_size paramater
	throughout.

2023-03-24  Michael Guravage  <guravage@arda.itf.cwi.nl>

	* fuse.py: Forgot to specify the LEARNING_RATE.

	* data.py (GSC_SSubsetSC): Added GSC_SSubsetSC class here so we
	can reference it elsewhere.
	(GSC_SSubsetSC.__init__): Correctly separate validation, testing
	and training datasets. NB: when you instantiate this class,
	self._walker already contains all the wav files.

	* pta.py (GSC_SSubsetSC.__init__): transform is a tuple composing
	several individual transformations; no need to wrap it in a tuple
	here.
	(GSC_SSubsetSC.__getitem__): transform is not a tuple so we can
	call it directly.

2023-03-07  Michael  <michael@ajax>

	* srnn_fin.py: Make the number of processes the Dataloader will
	spawn dependent on whether we're running on a CPU or GPU.

	Removed unused libraries:
	import time
	import librosa
	import matplotlib.pyplot as plt
	import scipy.io.wavfile as wav
	from matplotlib.gridspec import GridSpec
	from optim import RAdam
	from torch.optim.lr_scheduler import ExponentialLR, LambdaLR, MultiStepLR


2023-02-17  Michael Guravage  <michael@odysseus>

	* srnn_fin.py: Many small changes to get it running - almost.

	* data.py (MelSpectrogram.__call__): Pass wav as a positional
	argument, i.e. y=wav.

	(Normalize): Coppied this class from Bojian's SoLi/data.py.
